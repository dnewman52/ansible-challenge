---
- name: Provision Infrastructure
  hosts: localhost
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
  tasks:
    - name: import deploy_infra role
      include_role:
        name: deploy_infra
        vars:
          certificate_passphrase: !vault |
            $ANSIBLE_VAULT;1.1;AES256
            31646365346439353130356135373563663830366361616435386237343532653864326261653864
            6330633264366539373234633531613236323832383130350a383462353666386465326137353561
            32383236363564346564383963386634313262376335363130656236373630663962366639313761
            6333373463376465610a356334303165623165393664626534663862336565626538633839393664
            30393039383332353862323934386466313764313264666263623962616662623264626464393563
            6361653537666239313032366263393835626334663132336561
    - name: Refresh_inventory
      meta: refresh_inventory

- name: Prewarm SSH on EC2 instances
  hosts: tag_Name_web_instances
  gather_facts: false
  tasks:
    - name: Ping the boxes
      ansible.builtin.ping:
      register: output
      until: "'pong' in output.ping"
      retries: 10
      delay: 10

- name: Configure newly created infrastructure
  hosts: tag_Name_web_instances
  remote_user: ec2-user
  tasks:
    - name: Run configure_vm role
      include_role:
        name: configure_vm

- name: Deploy template 1 to webserver 1
  hosts: tag_Site_webserver_0
  remote_user: ec2-user
  roles:
    - deploy_site
  vars:
    template: avoid-the-bikes.html.j2

- name: Deploy template 2 to webserver 2
  hosts: tag_Site_webserver_1
  remote_user: ec2-user
  roles:
    - deploy_site
  vars:
    template: baby-wants-milk.html.j2

- name: Verify we can hit the newly configured endpoints
  hosts: localhost
  tasks:
    - name: Confirm that 200 response is returned
      uri:
        url: "http://{{ item }}"
        status_code: 200
      loop: "{{ instance_dns_names }}"
      register: output
      until: output.status == 200
      retries: 10
      delay: 10
